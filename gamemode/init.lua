---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Комерад.
--- DateTime: 5/22/2018 10:15 PM
---

DEFINE_BASECLASS( "gamemode_base" )

util.AddNetworkString("RAM_DynamicNotification")
util.AddNetworkString("RAM_ShowHelp")
util.AddNetworkString("RAM_HideResearchMenu")
util.AddNetworkString("RAM_RequestClientTechnologyUpdate")
util.AddNetworkString("RAM_StartTeamResearch")
util.AddNetworkString("RAM_RecordResearchVote")
util.AddNetworkString("RAM_ClientStatusUpdate")
util.AddNetworkString("RAM_PrintToTeam")
util.AddNetworkString("RAM_ServerTechnologyUpdate")
util.AddNetworkString("RAM_SyncMapTimer")
util.AddNetworkString("RAM_SyncPrepTimer")
util.AddNetworkString("RAM_SyncStatus")
util.AddNetworkString("RAM_RequestSyncMapTimer")
util.AddNetworkString("RAM_RequestSyncPrepTimer")
util.AddNetworkString("RAM_RequestSyncStatus")
util.AddNetworkString("RAM_MakeMoney")
util.AddNetworkString("RAM_ScientistUpdate")

AddCSLuaFile("cl_init.lua")

AddCSLuaFile("vgui/cl_hud.lua")
AddCSLuaFile("vgui/cl_pickteam.lua")
AddCSLuaFile("vgui/cl_research_menu.lua")
AddCSLuaFile("vgui/cl_scoreboard.lua")

AddCSLuaFile("shared.lua")

AddCSLuaFile("cl_research_manager.lua")
AddCSLuaFile("cl_research_category.lua")
AddCSLuaFile("cl_research_technology.lua")

AddCSLuaFile("shd_utils.lua")
AddCSLuaFile("cl_utils.lua")
AddCSLuaFile("cl_player_ext.lua")

include("shared.lua")
include("player.lua")
include("player_ext.lua")
include("entity_ext.lua")
include("physobj_ext.lua")
include("komerad_autorun.lua")
include("research_manager.lua")
include("research_category.lua")
include("research_technology.lua")
include("shd_utils.lua")
include("sv_utils.lua")

-- Convars --
CreateConVar("ram_map_time_limit", "30", FCVAR_NOTIFY + FCVAR_REPLICATED)
CreateConVar("ram_prep_time_limit", "1", FCVAR_NOTIFY + FCVAR_REPLICATED)
CreateConVar("ram_auto_vote_time_seconds", "30", FCVAR_NOTIFY + FCVAR_REPLICATED)
CreateConVar("ram_vote_time_limit_seconds", "60", FCVAR_NOTIFY + FCVAR_REPLICATED)
CreateConVar("ram_player_death_cost", "250", FCVAR_NOTIFY + FCVAR_REPLICATED)

--[[All local spaced server functions]]

local function OverseerSelectSpawn(team)
    local spawn_class = ''

    if team == TEAM_BLUE then
        spawn_class = 'info_overseer_blue_spawn'
    else
        spawn_class = 'info_overseer_orange_spawn'
    end

    local SpawnPoints = ents.FindByClass(spawn_class)

    local ChosenSpawnPoint = table.Random(SpawnPoints)

    if ChosenSpawnPoint == nil then
        return nil
    else
        return {
            pos = ChosenSpawnPoint:GetPos(),
            ang = ChosenSpawnPoint:GetAngles()
        }
    end
end

------------------------------------------------------------------------------------------------------------


local function EndMap()
    DynamicStatusUpdate(nil, 'The map has ended!', 'warning', nil)

    timer.Simple(15, function() game.LoadNextMap() end)
end

function EndPrep()
    if timer.Exists("RAM_TimerPrepEnd") then
        timer.Remove("RAM_TimerPrepEnd")
    end
    DynamicStatusUpdate(nil, 'Preparation has ended! Begin voting!', 'success', nil)
    local AllTeams = team.GetAllTeams()
    for ID, TeamInfo in pairs(AllTeams) do
        if ID == TEAM_BLUE or ID == TEAM_ORANGE then
            ClientStatusUpdate(RESEARCH_STATUS_VOTING, ID)
            TeamInfo.ResearchManager:StartResearchAndMoneyMaking()
        end
    end
end

local function InitMapEndTimer()
    timer.Create('RAM_TimerMapEnd', GetConVar("ram_map_time_limit"):GetInt() * 60, 1, EndMap)
end

local function InitPrepEndTimer()
    timer.Create('RAM_TimerPrepEnd', GetConVar("ram_prep_time_limit"):GetInt() * 60, 1, EndPrep)
end

local function InitTeamVariables()
    local AllTeams = team.GetAllTeams()
    for ID, TeamInfo in pairs(AllTeams) do
        if ID == TEAM_BLUE or ID == TEAM_ORANGE then
            local newResearchManager = ResearchManager(ID, TeamInfo['Name'])
            local armorCat = newResearchManager:AddCategory('armor', 'Armor')
            armorCat:AddTechnology('armor_one', 'Armor Type I', 'Light Armor (20)', nil, 60, 1)
            armorCat:AddTechnology('armor_two', 'Armor Type II', 'Decent Armor (40)', nil, 65, 2, {'armor_one'})
            armorCat:AddTechnology('armor_three', 'Armor Type III', 'Better Armor (60)', nil, 70, 3, {'armor_two'})
            armorCat:AddTechnology('armor_four', 'Armor Type IV', 'Good Armor (80)', nil, 75, 4, {'armor_three'})
            armorCat:AddTechnology('armor_five', 'Armor Type V', 'Best Armor (100)', nil, 75, 5, {'armor_four'})

            local healthCat = newResearchManager:AddCategory('health', 'Health')
            healthCat:AddTechnology('health_one', 'Health Type I', 'Light Health (20)', nil, 60, 1)
            healthCat:AddTechnology('health_two', 'Health Type II', 'Decent Health (40)', nil, 65, 2, {'health_one'})
            healthCat:AddTechnology('health_three', 'Health Type III', 'Better Health (60)', nil, 70, 3, {'health_two'})
            healthCat:AddTechnology('health_four', 'Health Type IV', 'Good Health (80)', nil, 75, 4, {'health_three'})
            healthCat:AddTechnology('health_five', 'Health Type V', 'Best Health (100)', nil, 75, 5, {'health_four'})

            local weapCat = newResearchManager:AddCategory('weapons', 'Weapons')
            weapCat:AddTechnology('revolver', 'Revolver', 'Mangum Revolver Pistol', 'weapon_ram_revolver', 70, 1)
            weapCat:AddTechnology('shotgun', 'Shotgun', 'Light Shotgun', 'weapon_ram_shotgun', 65, 2)
            weapCat:AddTechnology('smg', 'SMG', 'Basic SMG', 'weapon_ram_smg', 65, 3, {'revolver'})
            weapCat:AddTechnology('ar', 'Ar2', 'Assault Rifle', 'weapon_ram_ar2', 70, 3, {'shotgun'})
            weapCat:AddTechnology('gauss', 'Gauss Gun', 'Gauss Gun', 'weapon_ram_gauss', 80, 4, {'smg'})
            weapCat:AddTechnology('egon', 'Gluon Gun', 'A massive DPS weapon', 'weapon_ram_egon', 85, 5, {'ar'})

            local gadgetCat = newResearchManager:AddCategory('gadgets', 'Gadgets')
            gadgetCat:AddTechnology('satchel', 'Satchel Charges', 'Little Surprises', 'weapon_ram_satchel', 60, 1)
            gadgetCat:AddTechnology('grenade', 'Grenades', 'Classic Handgrenades', 'weapon_ram_handgrenade', 65, 2, {'satchel'})
            gadgetCat:AddTechnology('tripmine', 'Tripmines', "Don't look into the laser!", 'weapon_ram_tripmine', 70, 3, {'grenade'})

            local implantCat = newResearchManager:AddCategory('implants', 'Implants')
            implantCat:AddTechnology('legs_one', 'Cybenetic Legs MKI', 'Run Faster', nil, 60, 1)
            implantCat:AddTechnology('legs_two', 'Cybenetic Legs MKII', 'Jump Higher', nil, 65, 1, {'legs_one'})

            TeamInfo.ResearchManager = newResearchManager
            TeamInfo.Money = 30000 -- Every team gets $30,000 to start
            TeamInfo.Scientists = 3 -- Every team gets 3 to start
        end
    end
end

--[[All GM: spaced functions]]

function GM:Initialize()
    InitTeamVariables()
    InitPrepEndTimer()
    InitMapEndTimer()
end

function GM:ShowHelp(ply) -- This hook is called everytime F1 is pressed.
    local AllTeams = team.GetAllTeams()
    if (ply:Team() == TEAM_BLUE or ply:Team() == TEAM_ORANGE) then
        local status = AllTeams[ply:Team()]['ResearchManager'].status
        if status == RESEARCH_STATUS_VOTING and not AllTeams[ply:Team()].ResearchManager:HasUserVoted(ply:SteamID()) then
            net.Start("RAM_ShowHelp")
            net.WriteInt(status, 4)
            net.Send(ply)
        end
    end
end


--[[---------------------------------------------------------
   Name: gamemode:PlayerSpawn( )
   Desc: Called when a player spawns
-----------------------------------------------------------]]
function GM:PlayerSpawn( pl )

	player_manager.SetPlayerClass( pl, "player_ram" )

	BaseClass.PlayerSpawn( self, pl )

    pl:CrosshairDisable()

end


hook.Add("InitPostEntity", "SpawnRMNPCS", function()
    local AllTeams = team.GetAllTeams()
    for ID, TeamInfo in pairs(AllTeams) do
        if (ID ~= TEAM_CONNECTING and ID ~= TEAM_UNASSIGNED and ID ~= TEAM_SPECTATOR) then
            for k = 0, TeamInfo.Scientists - 1 do
                local new_scientist = ents.Create("ram_simple_scientist")
                if (not IsValid(new_scientist)) then return end -- Check whether we successfully made an entity, if not - bail
                --                button:SetModel("models/dav0r/buttons/button.mdl")
                local spawnpoint_pos = new_scientist:ScientistSelectSpawn(ID)
                if spawnpoint_pos ~= nil then
                    new_scientist:SetPos(spawnpoint_pos)
                    new_scientist:SetTeam(ID)
                    new_scientist:Spawn()
                else
                    new_scientist:Remove()
                end
            end
            local new_overseer = ents.Create("ram_overseer")
            if (not IsValid(new_overseer)) then return end -- Check whether we successfully made an entity, if not - bail
            --                button:SetModel("models/dav0r/buttons/button.mdl")
            local spawnpoint_pos_data = OverseerSelectSpawn(ID)
            if spawnpoint_pos_data ~= nil then
                new_overseer:SetPos(spawnpoint_pos_data['pos'])
                new_overseer:SetAngles(spawnpoint_pos_data['ang'])
                new_overseer:SetTeam(ID)
                new_overseer:Spawn()
            else
                new_overseer:Remove()
            end
        end
    end
end)


function CaptureScientist(new_team, scientist_name, scientist_cost, scientist_original_team)
    local new_scientist = ents.Create("ram_simple_scientist")
    if (not IsValid(new_scientist)) then return end -- Check whether we successfully made an entity, if not - bail
    local pos = new_scientist:ScientistSelectSpawn(new_team)
    if pos ~= nil then
        new_scientist:SetPos(pos)
        new_scientist:Spawn()
        new_scientist:SetTeam(new_team)
        new_scientist:SetDisplayName(scientist_name)
        new_scientist:SetCost(scientist_cost)
    else
        new_scientist:Remove()
    end

    local AllTeams = team.GetAllTeams()
    AllTeams[new_team].Scientists = AllTeams[new_team].Scientists + 1
    AllTeams[scientist_original_team].Scientists = AllTeams[scientist_original_team].Scientists - 1

    DynamicStatusUpdate(scientist_original_team, 'You have lost one of your scientists to your competitor!', 'error', nil)

    net.Start("RAM_ScientistUpdate")
    net.WriteInt(AllTeams[TEAM_BLUE].Scientists, 4)
    net.WriteInt(AllTeams[TEAM_ORANGE].Scientists, 4)
    net.Broadcast()

end

net.Receive("RAM_RequestSyncMapTimer", function(len, ply)
    local time_left = nil
    if timer.Exists("RAM_TimerMapEnd") then
        time_left = timer.TimeLeft("RAM_TimerMapEnd")
    else
        time_left = 0
    end
    net.Start("RAM_SyncMapTimer")
    net.WriteFloat(time_left)
    net.Send(ply)
end)

net.Receive("RAM_RequestSyncPrepTimer", function(len, ply)
--    print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    local time_left = nil
    if timer.Exists("RAM_TimerPrepEnd") then
        time_left = timer.TimeLeft("RAM_TimerPrepEnd")
    else
        time_left = 0
    end
    net.Start("RAM_SyncPrepTimer")
    net.WriteFloat(time_left)
    net.Send(ply)
end)

net.Receive("RAM_RequestSyncStatus", function(len, ply)
    net.Start("RAM_SyncStatus")
    net.WriteInt(team.GetAllTeams()[TEAM_BLUE].ResearchManager.status, 4)
    net.WriteInt(team.GetAllTeams()[TEAM_ORANGE].ResearchManager.status, 4)
    net.Send(ply)
end)
