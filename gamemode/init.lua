---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Комерад.
--- DateTime: 5/22/2018 10:15 PM
---

DEFINE_BASECLASS( "gamemode_base" )

util.AddNetworkString("RAM_DynamicNotification")
util.AddNetworkString("RAM_ShowHelp")
util.AddNetworkString("RAM_HideResearchMenu")
util.AddNetworkString("RAM_RequestClientTechnologyUpdate")
util.AddNetworkString("RAM_StartTeamResearch")
util.AddNetworkString("RAM_RecordResearchVote")
util.AddNetworkString("RAM_ClientStatusUpdate")
util.AddNetworkString("RAM_PrintToTeam")
util.AddNetworkString("RAM_ServerTechnologyUpdate")
util.AddNetworkString("RAM_SyncMapTimer")
util.AddNetworkString("RAM_SyncPrepTimer")
util.AddNetworkString("RAM_SyncStatus")
util.AddNetworkString("RAM_RequestSyncMapTimer")
util.AddNetworkString("RAM_RequestSyncPrepTimer")
util.AddNetworkString("RAM_RequestSyncStatus")
util.AddNetworkString("RAM_MakeMoney")
util.AddNetworkString("RAM_ScientistUpdate")
util.AddNetworkString("RAM_RequestClientUpdateEntireResearchTable")
util.AddNetworkString("RAM_RequestScientistSync")
util.AddNetworkString("RAM_RequestSyncResearchTimer")
util.AddNetworkString("RAM_SyncResearchTimer")

AddCSLuaFile("cl_init.lua")

AddCSLuaFile("vgui/cl_hud.lua")
AddCSLuaFile("vgui/cl_pickteam.lua")
AddCSLuaFile("vgui/cl_research_menu.lua")
AddCSLuaFile("vgui/cl_scoreboard.lua")

AddCSLuaFile("shared.lua")

AddCSLuaFile("cl_research_manager.lua")
AddCSLuaFile("cl_research_category.lua")
AddCSLuaFile("cl_research_technology.lua")

AddCSLuaFile("shd_utils.lua")
AddCSLuaFile("cl_utils.lua")
AddCSLuaFile("cl_player_ext.lua")

include("shared.lua")
include("player.lua")
include("player_ext.lua")
include("entity_ext.lua")
include("physobj_ext.lua")
include("komerad_autorun.lua")
include("research_manager.lua")
include("research_category.lua")
include("research_technology.lua")
include("shd_utils.lua")
include("sv_utils.lua")

--DEFAULT_RESEARCH_TIME = 60 -- GetConvar was not working in a specific spot...

-- Convars --
CreateConVar("ram_map_time_limit_minutes", "30", FCVAR_NOTIFY + FCVAR_REPLICATED) -- Map time limit
CreateConVar("ram_prep_time_limit_seconds", "30", FCVAR_NOTIFY + FCVAR_REPLICATED) -- Prep time
CreateConVar("ram_vote_time_limit_seconds", "30", FCVAR_NOTIFY + FCVAR_REPLICATED) -- How long you have to vote
CreateConVar("ram_player_death_cost", "250", FCVAR_NOTIFY + FCVAR_REPLICATED) -- How much money to lose on player death
CreateConVar("ram_research_time_seconds", "75", FCVAR_NOTIFY + FCVAR_REPLICATED) -- Research time in seconds. Do not go lower than 30

--[[All local spaced server functions]]

local function OverseerSelectSpawn(team)
    local spawn_class = ''

    if team == TEAM_BLUE then
        spawn_class = 'info_overseer_blue_spawn'
    else
        spawn_class = 'info_overseer_orange_spawn'
    end

    local SpawnPoints = ents.FindByClass(spawn_class)

    local ChosenSpawnPoint = table.Random(SpawnPoints)

    if ChosenSpawnPoint == nil then
        return nil
    else
        return {
            pos = ChosenSpawnPoint:GetPos(),
            ang = ChosenSpawnPoint:GetAngles()
        }
    end
end

local function SyncMapTimer(ply)
    local time_left = nil
    if timer.Exists("RAM_TimerMapEnd") then
        time_left = timer.TimeLeft("RAM_TimerMapEnd")
    else
        time_left = 0
    end
    net.Start("RAM_SyncMapTimer")
    net.WriteFloat(time_left)
    net.Send(ply)
end

local function SyncPrepTimer(ply)
    local time_left = nil
    if timer.Exists("RAM_TimerPrepEnd") then
        time_left = timer.TimeLeft("RAM_TimerPrepEnd")
    else
        time_left = 0
    end
    net.Start("RAM_SyncPrepTimer")
    net.WriteFloat(time_left)
    net.Send(ply)
end

local function SyncPrepTimerBroadcast()
    local time_left = nil
    if timer.Exists("RAM_TimerPrepEnd") then
        time_left = timer.TimeLeft("RAM_TimerPrepEnd")
    else
        time_left = 0
    end
    net.Start("RAM_SyncPrepTimer")
    net.WriteFloat(time_left)
    net.Broadcast()
end

local function SyncStatus(ply)
    net.Start("RAM_SyncStatus")
    net.WriteInt(team.GetAllTeams()[TEAM_BLUE].ResearchManager.status, 4)
    net.WriteInt(team.GetAllTeams()[TEAM_ORANGE].ResearchManager.status, 4)
    net.Send(ply)
end

------------------------------------------------------------------------------------------------------------


local function EndMap()
    DynamicStatusUpdate(nil, 'The map has ended!', 'warning', nil)

    timer.Simple(15, function() game.LoadNextMap() end)
end

function EndPrep()
    if timer.Exists("RAM_TimerPrepEnd") then
        timer.Remove("RAM_TimerPrepEnd")
        SyncPrepTimerBroadcast()
        DynamicStatusUpdate(nil, 'Preparation has ended! Begin voting!', 'voting', nil)
        local AllTeams = team.GetAllTeams()
        for ID, TeamInfo in pairs(AllTeams) do
            if ID == TEAM_BLUE or ID == TEAM_ORANGE then
                ClientStatusUpdate(RESEARCH_STATUS_VOTING, ID)
                TeamInfo.ResearchManager:StartResearchAndMoneyMaking()
            end
        end
    end
end

local function InitMapEndTimer()
    timer.Create('RAM_TimerMapEnd', GetConVar("ram_map_time_limit_minutes"):GetInt() * 60, 1, EndMap)
end

local function InitPrepEndTimer()
    timer.Create('RAM_TimerPrepEnd', GetConVar("ram_prep_time_limit_seconds"):GetInt(), 1, EndPrep)
end

local function InitTeamVariables()
    local AllTeams = team.GetAllTeams()
    for ID, TeamInfo in pairs(AllTeams) do
        if ID == TEAM_BLUE or ID == TEAM_ORANGE then

            local newResearchManager = ResearchManager({
                team_index = ID,
                team_name = TeamInfo['Name']
            })
            local armorCat = newResearchManager:AddCategory({
                key = 'armor',
                name = 'Armor',
            })

            armorCat:AddTechnology({
                key = 'armor_one', -- This is required
                name = 'Armor Type I', -- This is required
                tier = 1, -- This is required
            })

            armorCat:AddTechnology({
                key = 'armor_two', -- This is required
                name = 'Armor Type II', -- This is required
                tier = 2, -- This is required
                reqs = {'armor_one'}
            })

            armorCat:AddTechnology({
                key = 'armor_three', -- This is required
                name = 'Armor Type III', -- This is required
                tier = 3, -- This is required
                reqs = {'armor_two'}
            })

            armorCat:AddTechnology({
                key = 'armor_four', -- This is required
                name = 'Armor Type IV', -- This is required
                tier = 4, -- This is required,
                reqs = {'armor_three'}
            })

            armorCat:AddTechnology({
                key = 'armor_five', -- This is required
                name = 'Armor Type V', -- This is required
                tier = 5, -- This is required,
                reqs = {'armor_four'}
            })

            local healthCat = newResearchManager:AddCategory({
                key = 'health',
                name = 'Health',
            })

            healthCat:AddTechnology({
                key = 'health_one', -- This is required
                name = 'Health Type I', -- This is required
                tier = 1, -- This is required,
            })

            healthCat:AddTechnology({
                key = 'health_two', -- This is required
                name = 'Health Type II', -- This is required
                tier = 2, -- This is required
                reqs = {'health_one'}
            })

            healthCat:AddTechnology({
                key = 'health_three', -- This is required
                name = 'Health Type III', -- This is required
                tier = 3, -- This is required
                reqs = {'health_two'}
            })

            healthCat:AddTechnology({
                key = 'health_four', -- This is required
                name = 'Health Type IV', -- This is required
                tier = 4, -- This is required
                reqs = {'health_three'}
            })

            healthCat:AddTechnology({
                key = 'health_five', -- This is required
                name = 'Health Type V', -- This is required
                tier = 5, -- This is required
                reqs = {'health_four'}
            })

            local weapCat = newResearchManager:AddCategory({
                key = 'weapons',
                name = 'Weapons',
            })
            weapCat:AddTechnology({
                key = 'revolver',
                name = 'Revolver',
                class = 'weapon_ram_revolver',
                tier = 1
            })

            weapCat:AddTechnology({
                key = 'shotgun',
                name = 'Shotgun',
                class = 'weapon_ram_shotgun',
                tier = 2
            })

            weapCat:AddTechnology({
                key = 'smg',
                name = 'SMG',
                class = 'weapon_ram_smg',
                tier = 3,
                reqs = { 'revolver' }
            })

            weapCat:AddTechnology({
                key = 'ar',
                name = 'Ar2',
                class = 'weapon_ram_ar2',
                tier = 4,
                reqs = { 'shotgun' }
            })

            weapCat:AddTechnology({
                key = 'crossbow',
                name = 'Crossbow',
                class = 'weapon_crossbow',
                tier = 5,
                reqs = { 'smg' }
            })

            weapCat:AddTechnology({
                key = 'rpg',
                name = 'RPG',
                class = 'weapon_rpg',
                tier = 6,
                reqs = { 'ar' }
            })

            weapCat:AddTechnology({
                key = 'gauss',
                name = 'Gauss Gun',
                class = 'weapon_ram_gauss',
                tier = 7,
                reqs = { 'crossbow' }
            })

            weapCat:AddTechnology({
                key = 'egon',
                name = 'Gluon Gun',
                class = 'weapon_ram_egon',
                tier = 8,
                reqs = { 'rpg' }
            })

            local gadgetCat = newResearchManager:AddCategory({
                key = 'gadgets',
                name = 'Gadgets'
            })

            gadgetCat:AddTechnology({
                key = 'satchel',
                name = 'Satchel Charges',
                class = 'weapon_ram_satchel',
                tier = 1
            })

            gadgetCat:AddTechnology({
                key = 'grenade',
                name = 'Grenades',
                class = 'weapon_frag',
                tier = 2,
                reqs = { 'satchel' }
            })

            gadgetCat:AddTechnology({
                key = 'tripmine',
                name = 'Tripmines',
                class = 'weapon_ram_tripmine',
                tier = 3,
                reqs = { 'grenade' }
            })

            local implantCat = newResearchManager:AddCategory({
                key = 'implants',
                name = 'Implants'
            })

            implantCat:AddTechnology({
                key = 'legs_one',
                name = 'Cybenetic Legs MKI',
                tier = 1
            })

            implantCat:AddTechnology({
                key = 'legs_two',
                name = 'Cybenetic Legs MKII',
                tier = 2,
                reqs = { 'legs_one' }
            })

            TeamInfo.ResearchManager = newResearchManager
            TeamInfo.Money = 30000 -- Every team gets $30,000 to start
            TeamInfo.Scientists = 3 -- Every team gets 3 to start
        end
    end
end

--[[All GM: spaced functions]]

function GM:Initialize()
    InitTeamVariables()
    InitPrepEndTimer()
    InitMapEndTimer()
end

function GM:ShowHelp(ply) -- This hook is called everytime F1 is pressed.
    local AllTeams = team.GetAllTeams()
    if (ply:Team() == TEAM_BLUE or ply:Team() == TEAM_ORANGE) then
        local status = AllTeams[ply:Team()]['ResearchManager'].status
        if status == RESEARCH_STATUS_VOTING and not AllTeams[ply:Team()].ResearchManager:HasUserVoted(ply:SteamID()) then
            net.Start("RAM_ShowHelp")
            net.WriteInt(status, 4)
            net.Send(ply)
        end
    end
end


--[[---------------------------------------------------------
   Name: gamemode:PlayerSpawn( )
   Desc: Called when a player spawns
-----------------------------------------------------------]]
function GM:PlayerSpawn( pl )

	player_manager.SetPlayerClass( pl, "player_ram" )

	BaseClass.PlayerSpawn( self, pl )

    pl:CrosshairDisable()

end


hook.Add("InitPostEntity", "SpawnRMNPCS", function()
    local AllTeams = team.GetAllTeams()
    for ID, TeamInfo in pairs(AllTeams) do
        if (ID ~= TEAM_CONNECTING and ID ~= TEAM_UNASSIGNED and ID ~= TEAM_SPECTATOR) then
            for k = 0, TeamInfo.Scientists - 1 do
                local new_scientist = ents.Create("ram_simple_scientist")
                if (not IsValid(new_scientist)) then return end -- Check whether we successfully made an entity, if not - bail
                --                button:SetModel("models/dav0r/buttons/button.mdl")
                local spawnpoint_pos = new_scientist:ScientistSelectSpawn(ID)
                if spawnpoint_pos ~= nil then
                    new_scientist:SetPos(spawnpoint_pos)
                    new_scientist:SetTeam(ID)
                    new_scientist:Spawn()
                else
                    new_scientist:Remove()
                end
            end
            local new_overseer = ents.Create("ram_overseer")
            if (not IsValid(new_overseer)) then return end -- Check whether we successfully made an entity, if not - bail
            --                button:SetModel("models/dav0r/buttons/button.mdl")
            local spawnpoint_pos_data = OverseerSelectSpawn(ID)
            if spawnpoint_pos_data ~= nil then
                new_overseer:SetPos(spawnpoint_pos_data['pos'])
                new_overseer:SetAngles(spawnpoint_pos_data['ang'])
                new_overseer:SetTeam(ID)
                new_overseer:Spawn()
            else
                new_overseer:Remove()
            end
        end
    end
end)

local function SyncScientists(ply)
    local AllTeams = team.GetAllTeams()
    if ply ~= nil then
        net.Start("RAM_ScientistUpdate")
        net.WriteInt(AllTeams[TEAM_BLUE].Scientists, 4)
        net.WriteInt(AllTeams[TEAM_ORANGE].Scientists, 4)
        net.Send(ply)
    else
        net.Start("RAM_ScientistUpdate")
        net.WriteInt(AllTeams[TEAM_BLUE].Scientists, 4)
        net.WriteInt(AllTeams[TEAM_ORANGE].Scientists, 4)
        net.Broadcast()
    end
end


function CaptureScientist(new_team, scientist_name, scientist_cost, scientist_original_team)
    local new_scientist = ents.Create("ram_simple_scientist")
    if (not IsValid(new_scientist)) then return end -- Check whether we successfully made an entity, if not - bail
    local pos = new_scientist:ScientistSelectSpawn(new_team)
    if pos ~= nil then
        new_scientist:SetPos(pos)
        new_scientist:Spawn()
        new_scientist:SetTeam(new_team)
        new_scientist:SetDisplayName(scientist_name)
        new_scientist:SetCost(scientist_cost)
    else
        new_scientist:Remove()
    end

    local AllTeams = team.GetAllTeams()
    AllTeams[new_team].Scientists = AllTeams[new_team].Scientists + 1
    AllTeams[scientist_original_team].Scientists = AllTeams[scientist_original_team].Scientists - 1

    DynamicStatusUpdate(scientist_original_team, 'You have lost one of your scientists to your competitor!', 'kidnap', nil)

    SyncScientists(nil)

end

net.Receive("RAM_RequestSyncMapTimer", function(len, ply)
    SyncMapTimer(ply)
end)

net.Receive("RAM_RequestSyncPrepTimer", function(len, ply)
    SyncPrepTimer(ply)
end)

net.Receive("RAM_RequestSyncStatus", function(len, ply)
    SyncStatus(ply)
end)

net.Receive("RAM_RequestScientistSync", function(len, ply)
    SyncScientists(ply)
end)

net.Receive("RAM_RequestSyncResearchTimer", function(len, ply)
    if ply:IsValid() and (ply:Team() == TEAM_BLUE or ply:Team() == TEAM_ORANGE) then
        team.GetAllTeams()[ply:Team()].ResearchManager:SyncPlyResearchTimer(ply)
    end
end)
