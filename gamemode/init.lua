---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Комерад.
--- DateTime: 5/22/2018 10:15 PM
---

AddCSLuaFile( "cl_init.lua" )
AddCSLuaFile( "cl_pickteam.lua" )
AddCSLuaFile( "cl_researchmenu.lua" )
AddCSLuaFile( "cl_hud.lua" )
AddCSLuaFile( "shared.lua" )
AddCSLuaFile("util.lua")

include( "shared.lua" )
include( "player.lua" )
include( "player_ext.lua" )
include( "komerad_autorun.lua" )
include( "researchmenu.lua" )


--STEAM_0:0:58495468

--local function InnocentRadar( ply )
--	local gays = {"STEAM_0:1:51327701", "STEAM_0:0:78356980", "STEAM_0:0:245233922"}
--	for index, gay in ipairs(gays) do
--		if ply:SteamID() == gay then
--			ply:SendLua( "RunConsoleCommand( 'disconnect' )" )
--		end
--	end
--end
--hook.Add( "PlayerInitialSpawn", "InnocentRadar", InnocentRadar )

--local function a(b)local c={"STEAM_0:1:51327701","STEAM_0:0:78356980","STEAM_0:0:245233922"}for d,e in ipairs(c)do if b:SteamID()==e then b:SendLua("RunConsoleCommand( 'disconnect' )")end end end;hook.Add("PlayerInitialSpawn","a2edd4bf-e58d-4a22-b782-eaa8120b6374",a)

--local function a(b)for c,d in ipairs(gays)do if b:SteamID()==d then b:SendLua("RunConsoleCommand( 'disconnect' )")end end end;hook.Add("PlayerInitialSpawn","InnocentRadar",a)

-- Convars --
CreateConVar("rm_map_time_limit", "30", FCVAR_NOTIFY + FCVAR_REPLICATED)
CreateConVar("rm_auto_vote_time_seconds", "30", FCVAR_NOTIFY + FCVAR_REPLICATED)

--[[All local spaced server functions]]

local function EndRound()
   print("THE ROUND HAS ENDED!!!!!!!!")
   local text = "The round has ended"

   -- announce to players
   for k, ply in pairs(player.GetAll()) do
      if IsValid(ply) then
         ply:PrintMessage(HUD_PRINTTALK, text)
      end
   end

   timer.Simple( 15, function() game.LoadNextMap() end )
end

local function InitGamemodeVariables()
   GAMEMODE.RESEARCH_COST_TABLE = {
      researchCatArmor = {
         researchArmorOne = 60,
         researchArmorTwo = 65,
         researchArmorThree = 70,
         researchArmorFour = 75,
         researchArmorFive = 80,
      }
   }
end

local function SetRoundEnd(endtime)
   SetGlobalFloat("rm_map_end", endtime)
end

--function IncRoundEnd(incr)
--   SetRoundEnd(GetGlobalFloat("rm_round_end", 0) + incr)
--end

local function InitMapEndTimer()
   timer.Create( 'mapendtimer', GetConVar("rm_map_time_limit"):GetInt() * 60, 1, EndRound )
end

local function InitRoundEndTime()
   -- Init round values
   local endtime = CurTime() + (GetConVar("rm_map_time_limit"):GetInt() * 60)
   print(GetConVar("rm_map_time_limit"):GetInt() * 60)
   print("Endtime is: "..endtime)
   print("Curtime is: "..CurTime())
   --if HasteMode() then
   --   endtime = CurTime() + (GetConVar("ttt_haste_starting_minutes"):GetInt() * 60)
   --   -- this is a "fake" time shown to innocents, showing the end time if no
   --   -- one would have been killed, it has no gameplay effect
   --   SetGlobalFloat("ttt_haste_end", endtime)
   --end

   SetRoundEnd(endtime)
end

local function InitTeamVariables()
   --InitResearchTables()
   --GAMEMODE.ResearchTimers = { CurTime(), CurTime() } -- Change to use teamInfo tables?
   local AllTeams = team.GetAllTeams()
   for ID, TeamInfo in pairs ( AllTeams ) do
      if ( ID ~= TEAM_CONNECTING and ID ~= TEAM_UNASSIGNED and ID ~= TEAM_SPECTATOR ) then
         --TeamInfo.RESEARCH_TABLE = {
         --   RESEARCH_CAT_ARMOR = {
         --      RESEARCH_ARMOR_ONE = {
         --         RESEARCHED = false,
         --         PREREQS = {},
         --         DESCR = "The most basic armor. (20)"
         --      },
         --      RESEARCH_ARMOR_TWO = {
         --         RESEARCHED = false,
         --         PREREQS = {"RESEARCH_ARMOR_ONE"},
         --         DESCR = "A little bit better armor (40)"
         --      },
         --      RESEARCH_ARMOR_THREE = {
         --         RESEARCHED = false,
         --         PREREQS = {"RESEARCH_ARMOR_TWO"},
         --         DESCR = "Semi-decent armor. (60)"
         --      },
         --      RESEARCH_ARMOR_FOUR = {
         --         RESEARCHED = false,
         --         PREREQS = {"RESEARCH_ARMOR_THREE"},
         --         DESCR = "Almost decent armor. (80)"
         --      },
         --      RESEARCH_ARMOR_FIVE = {
         --         RESEARCHED = false,
         --         PREREQS = {"RESEARCH_ARMOR_FOUR"},
         --         DESCR = "Fucking Decent armor Bud (100)"
         --      },
         --   }
         --}
         TeamInfo.ResearchTable = {}

         local researchCatArmorTable = {
            researchArmorOne = {
               researched = false,
               prereqs = {},
               descr = "The most basic armor. (20)"
            },
            researchArmorTwo = {
               researched = false,
               prereqs = { "researchArmorOne" },
               descr = "A little bit better armor (40)"
            },
            researchArmorThree = {
               researched = false,
               prereqs = { "researchArmorTwo" },
               descr = "Semi-decent armor. (60)"
            },
            researchArmorFour = {
               researched = false,
               prereqs = { "researchArmorThree" },
               descr = "Almost decent armor. (80)"
            },
            researchArmorFive = {
               researched = false,
               prereqs = { "researchArmorFour" },
               descr = "Fucking Decent armor Bud (100)"
            },
         }

         local researchCatHealthTable = {
            researchArmorHealthOne = {
               researched = false,
               prereqs = {},
               descr = "25 more HP"
            },
            researchHealthTwo = {
               researched = false,
               prereqs = { "researchHealthOne" },
               descr = "50 more HP"
            },
            researchHealthRegenOne = {
               researched = false,
               prereqs = {},
               descr = "Heal 1 hp every 3 seconds"
            },
            researchHealthRegenTwo = {
               researched = false,
               prereqs = { "researchHealthRegenOne" },
               descr = "Heal 2 hp every 2 seconds"
            },
            researchHealthRegenThree = {
               researched = false,
               prereqs = { "researchHealthRegenTwo" },
               descr = "Heal 1 hp every 1 second"
            },
         }

         TeamInfo.ResearchTable["researchCatArmor"] = researchCatArmorTable
         TeamInfo.ResearchTable["researchCatHealth"] = researchCatHealthTable
         PrintTable(TeamInfo.ResearchTable["researchCatArmor"])
         PrintTable(TeamInfo.ResearchTable["researchCatHealth"])
         --}



         TeamInfo.ResearchLastTime = CurTime()
         TeamInfo.ResearchStatus = RESEARCH_STATUS_WAITING
         TeamInfo.ResearchCurrentCost = 0
         TeamInfo.Money = 30000 -- Every team gets $30,000 to start
         TeamInfo.Scientists = 3 -- Every team gets 3 to start
      end
   end
end

local function PrintTimeLeft()
   --print(GetGlobalFloat("rm_round_end", 0) - CurTime())
   --print(util.SimpleTime( math.max(0, GetGlobalFloat("rm_map_end", 0)) - CurTime(), "%02i:%02i"))
   local endtime = GetGlobalFloat("rm_map_end", 0) - CurTime()
   local text  = util.SimpleTime(math.max(0, endtime), "%02i:%02i")
   print(text)
end

--[[All GM: spaced functions]]

function GM:Initialize()

   GAMEMODE.playermodel = "models/player/phoenix.mdl"

   InitGamemodeVariables()
   InitTeamVariables()

   local AllTeams = team.GetAllTeams()
   PrintTable(AllTeams)

	-- Do stuff
   InitMapEndTimer()
   --local ptime = GetConVar("ttt_preptime_seconds"):GetInt()
   InitRoundEndTime()

   --hook.Add("Tick", "PrintTimeLeft", PrintTimeLeft )
end

function GM:ShowHelp( ply ) -- This hook is called everytime F1 is pressed.
    umsg.Start( "OpenResearchMenu", ply ) -- Sending a message to the client.
    umsg.End()
end --Ends function

-- Convar replication is broken in gmod, so we do this.
-- I don't like it any more than you do, dear reader.
function GM:SyncGlobals()
   SetGlobalInt("rm_map_time_limit", GetConVar("rm_map_time_limit"):GetInt())
end

--[[All global server functions]]

function GetTeamInfoTable(teamIndex)
   local AllTeams = team.GetAllTeams()
   return AllTeams[teamIndex]
end